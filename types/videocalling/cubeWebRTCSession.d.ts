export = WebRTCSession;
declare class WebRTCSession {
    constructor(params: any);
    ID: any;
    state: number;
    initiatorID: number;
    opponentsIDs: any;
    callType: number;
    peerConnections: {};
    localStream: any;
    mediaParams: any;
    signalingProvider: any;
    currentUserID: any;
    maxBandwidth: any;
    answerTimer: NodeJS.Timeout;
    startCallTime: number;
    acceptCallTime: number;
    onUserNotAnswerListener: any;
    onRemoteStreamListener: any;
    onSessionCloseListener: any;
    onCallStatsReport: any;
    onSessionConnectionStateChangedListener: any;
    getDisplayMedia(params: any): Promise<any>;
    getUserMedia(params: any): Promise<any>;
    _upsertStream(stream: any, elementId: any, options: any): any;
    _replaceTracks(stream: any): void;
    setMaxBandwidth(maxBandwidth: any): void;
    connectionStateForUser(userID: any): any;
    attachMediaStream(id: any, stream: any, options: any): void;
    detachMediaStream(id: any, options: any): void;
    switchMediaTracks(deviceIds: any): Promise<void>;
    call(extension: any): void;
    _callInternal(userID: any, extension: any, withOnNotAnswerCallback: any): void;
    accept(extension: any): void;
    _acceptInternal(userID: any, extension: any): void;
    reject(extension: any): void;
    stop(extension: any): void;
    canInitiateIceRestart(userID: any): boolean;
    iceRestart(userID: any): void;
    mute(type: any): void;
    unmute(type: any): void;
    _processOnCall(callerID: any, extension: any): void;
    _processOnAccept(userID: any, extension: any): void;
    _processOnReject(userID: any, extension: any): void;
    _processOnStop(userID: any, extension: any): void;
    _processOnIceCandidates(userID: any, extension: any): void;
    _processOnIceRestart(userID: any, extension: any): void;
    _processOnIceRestartAccept(userID: any, extension: any): void;
    _processCall(peerConnection: any, ext: any): void;
    _processIceCandidates(peerConnection: any, iceCandidates: any): void;
    _processOnNotAnswer(peerConnection: any): void;
    _onRemoteStreamListener(userID: any, stream: any): void;
    _onCallStatsReport(userId: any, stats: any, error: any): void;
    _onSessionConnectionStateChangedListener(userID: any, connectionState: any): void;
    _createPeer(userID: any, peerConnectionType: any): RTCPeerConnection;
    _close(): void;
    _closeSessionIfAllConnectionsClosed(): void;
    _closeLocalMediaStream(): void;
    _muteStream(enabled: any, type: any): void;
    _clearAnswerTimer(): void;
    _startAnswerTimer(): void;
    _clearWaitingOfferOrAnswerTimer(): void;
    waitingOfferOrAnswerTimer: NodeJS.Timeout;
    _startWaitingOfferOrAnswerTimer(time: any): void;
    _uniqueOpponentsIDs(): number[];
    _uniqueOpponentsIDsWithoutInitiator(): any[];
    toString(): string;
}
//# sourceMappingURL=cubeWebRTCSession.d.ts.map